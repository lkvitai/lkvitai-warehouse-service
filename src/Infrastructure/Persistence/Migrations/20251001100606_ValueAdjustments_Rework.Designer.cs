// <auto-generated />
using System;
using Lkvitai.Warehouse.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lkvitai.Warehouse.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20251001100606_ValueAdjustments_Rework")]
    partial class ValueAdjustments_Rework
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wh")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.BatchLineage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MovementId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentBatchId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QtyBase")
                        .HasColumnType("numeric(18,6)");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ChildBatchId");

                    b.HasIndex("MovementId");

                    b.HasIndex("ParentBatchId");

                    b.ToTable("batch_lineage", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.Bin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WarehouseRackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WarehouseZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseRackId");

                    b.HasIndex("WarehouseZoneId");

                    b.HasIndex("WarehousePhysicalId", "Code")
                        .IsUnique();

                    b.ToTable("bin", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.ExportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorFilePath")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset?>("ExportedAtUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("FilePath")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("SliceKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SliceType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("SliceType", "SliceKey");

                    b.ToTable("export_job", "job");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.ExportSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly?>("AtUtc")
                        .HasColumnType("time without time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Cron")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastRunAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("NextRunAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("SliceKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SliceType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("Enabled");

                    b.HasIndex("SliceType", "SliceKey")
                        .IsUnique();

                    b.ToTable("export_schedule", "job");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.InventoryCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BinId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CountedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CountedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QtyCounted")
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("QtySystemAtStart")
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("inventory_count", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.InventorySession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("inventory_session", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttrsJson")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("UomBase")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("item", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BatchExpDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BatchMfgDate")
                        .HasColumnType("date");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("BatchQuality")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("BinId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocNo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Factor")
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("PerformedAt")
                        .HasColumnType("timestamptz");

                    b.Property<decimal>("QtyBase")
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Ref")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid?>("ToBinId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToWarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Uom")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid?>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PerformedAt");

                    b.HasIndex("ItemId", "BinId", "BatchId");

                    b.HasIndex("ItemId", "ToBinId", "BatchId");

                    b.ToTable("movement", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.StockBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BinId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QtyBase")
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("WarehouseLogicalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("WarehouseLogicalId");

                    b.HasIndex("ItemId", "WarehousePhysicalId", "WarehouseLogicalId", "BinId", "BatchId")
                        .IsUnique();

                    b.ToTable("stock_balance", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.StockBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("MfgDate")
                        .HasColumnType("date");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ItemId", "BatchNo")
                        .IsUnique();

                    b.ToTable("stock_batch", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.ValueAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BinId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DeltaValue")
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WarehouseLogicalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("BinId");

                    b.HasIndex("ItemId");

                    b.HasIndex("WarehouseLogicalId");

                    b.HasIndex("WarehousePhysicalId");

                    b.HasIndex("ItemId", "WarehousePhysicalId", "WarehouseLogicalId", "BinId", "BatchId");

                    b.ToTable("value_adjustment", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehouseLogical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tags")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("warehouse_logical", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehousePhysical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LogicalId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LogicalId");

                    b.ToTable("warehouse_physical", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehouseRack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("WarehouseZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseZoneId", "Code")
                        .IsUnique();

                    b.ToTable("warehouse_rack", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehouseZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("WarehousePhysicalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehousePhysicalId", "Code")
                        .IsUnique();

                    b.ToTable("warehouse_zone", "wh");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.BatchLineage", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.StockBatch", "ChildBatch")
                        .WithMany("Parents")
                        .HasForeignKey("ChildBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.StockBatch", "ParentBatch")
                        .WithMany("Children")
                        .HasForeignKey("ParentBatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChildBatch");

                    b.Navigation("Movement");

                    b.Navigation("ParentBatch");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.Bin", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehousePhysical", null)
                        .WithMany()
                        .HasForeignKey("WarehousePhysicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseRack", null)
                        .WithMany()
                        .HasForeignKey("WarehouseRackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseZone", null)
                        .WithMany()
                        .HasForeignKey("WarehouseZoneId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.StockBalance", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.StockBatch", "Batch")
                        .WithMany("Balances")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseLogical", "WarehouseLogical")
                        .WithMany()
                        .HasForeignKey("WarehouseLogicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Batch");

                    b.Navigation("WarehouseLogical");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.ValueAdjustment", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.StockBatch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.Bin", "Bin")
                        .WithMany()
                        .HasForeignKey("BinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseLogical", "WarehouseLogical")
                        .WithMany()
                        .HasForeignKey("WarehouseLogicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehousePhysical", "WarehousePhysical")
                        .WithMany()
                        .HasForeignKey("WarehousePhysicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Batch");

                    b.Navigation("Bin");

                    b.Navigation("Item");

                    b.Navigation("WarehouseLogical");

                    b.Navigation("WarehousePhysical");
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehousePhysical", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseLogical", null)
                        .WithMany()
                        .HasForeignKey("LogicalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehouseRack", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehouseZone", null)
                        .WithMany()
                        .HasForeignKey("WarehouseZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.WarehouseZone", b =>
                {
                    b.HasOne("Lkvitai.Warehouse.Domain.Entities.WarehousePhysical", null)
                        .WithMany()
                        .HasForeignKey("WarehousePhysicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lkvitai.Warehouse.Domain.Entities.StockBatch", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Children");

                    b.Navigation("Parents");
                });
#pragma warning restore 612, 618
        }
    }
}
